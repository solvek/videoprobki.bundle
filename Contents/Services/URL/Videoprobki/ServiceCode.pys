RE_EXTRACT = Regex('"(?P<cam_id>cam\d+)",.+"(?P<base_url>(http|rtmp)://.+/streams/)",.+"(?P<gplmod>gplmod\d+)"')

def MetadataObjectForURL(url):

    Log.Debug("Meta object requested url: %s" % url)

    page = HTML.ElementFromURL(url)

    title = page.xpath('//h1/span')[0].text

    node = page.xpath('//div[@class="node"]/div')[1]

    description = HTML.StringFromElement(node.xpath('./div')[3], encoding='utf8')
    description = String.StripTags(description)

    thumb = node.xpath('./div')[4].xpath('//img')[0].get('src')

    Log.Debug("Meta object requested url: %s, title: %s, description: %s, thumb: %s" % (url, title, description, thumb))

    return VideoClipObject(
        title = title,
        summary = description,
        thumb = Resource.ContentsOfURLWithFallback(thumb)
    )


def MediaObjectsForURL(url):

    Log.Debug("Media objects requested: %s" % (url))

    return [
        MediaObject(
            video_resolution = '800',
            video_codec = VideoCodec.H264,
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True,
            container = Container.MP4,
            parts = [
                PartObject(key = Callback(PlayVideo, url=url))
            ]
        )
    ]

@indirect
def PlayVideo(url):

    page = HTML.ElementFromURL(url)

    text = page.xpath('//div[contains(@class, "node")]//script')[0].text

    # Log.Debug('Extracted text: %s' % text)

    m = RE_EXTRACT.search(text)

    camId = m.group('cam_id')
    gplmod = m.group('gplmod')
    base_url = m.group('base_url')

    streams = HTTP.Request(
        'http://videoprobki.ua/%s' % gplmod,
        data='p1=%s&p2=2&p3=1&p4=1' % camId,
        headers={
            'Content-Type' : 'application/x-www-form-urlencoded'
            }
        ).content

    Log.Debug('Streams: %s' % streams);

    video_url = base_url+[x.strip() for x in streams.split(',')][-1]

    if video_url.startswith('rtmp:'):
        video_url = 'http:'+video_url[5:]

    Log.Debug("Requested url: %s, Playing url: '%s'" % (url, video_url))

    return IndirectResponse(VideoClipObject, key=video_url)
